using System.Text;
using A3TelegramBot.Application.Commands;
using A3TelegramBot.Application.Contracts;
using A3TelegramBot.Application.Dto;
using Microsoft.Extensions.Options;

namespace A3TelegramBot.Infrastructure.Services.MessageText;

internal sealed class MessageTextProvider(IOptions<MessageTextOptions> messageTextOptions) : IMessageTextProvider
{
    private const string CommandNotFoundBase = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–∞";
    private const string CommandNotFoundWithParam = "–ö–æ–º–∞–Ω–¥–∞ {0} –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–∞";

    public string GetMainMenuText() => "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:";
    public string GetStartText() => "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–•–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –ª–æ–º?\n–í–∞–º —Å—é–¥–∞!";

    public string GetHelpText()
    {
        var commands = TelegramBotCommands.AllCommands
            .Where(static telegramBotCommand => telegramBotCommand.Type == TelegramCommandType.TextCommand)
            .Select(static telegramBotCommand => $"{telegramBotCommand.Command} - {telegramBotCommand.Description}");

        return "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + string.Join("\n", commands);
    }

    public string GetRequestPhoneText() => "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.";
    public string GetRequestNameText() => "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?";

    public string GetCallBackRequestCompletedText(string name, string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(phoneNumber))
            throw new ArgumentException("–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");

        return $"{name}, –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –ø–æ –Ω–æ–º–µ—Ä—É: {phoneNumber} –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.";
    }

    public string GetCallBackRequestAlreadyCreatedText() => "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.";
    public string GetErrorText(string errorMessage) => $"–û—à–∏–±–∫–∞: {errorMessage}.";

    public string GetCommandNotFoundText(string? providedCommand) => providedCommand is not null
        ? string.Format(CommandNotFoundWithParam, providedCommand)
        : CommandNotFoundBase;

    public string GetPriceText() => $"–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ü–µ–Ω–∞–º–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {messageTextOptions.Value.PriceLink}.";
    public string GetServicesText() => $"–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —É—Å–ª—É–≥–∞–º–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {messageTextOptions.Value.ServicesLink}.";
    public string GetCallBackRequestCancelledText() => "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞.";
    public string GetRequestLocationText() => "–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∏–µ–º–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ-–ª–æ–∫–∞—Ü–∏–µ–π.";

    public string GetReceptionsListText(IEnumerable<ReceptionInfo> receptions)
    {
        var receptionInfos = receptions as ReceptionInfo[] ?? receptions.ToArray();

        if (receptionInfos.Length == 0)
            return "–ü—Ä–∏–µ–º–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";

        var sb = new StringBuilder("–ë–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–∏–µ–º–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:\n");

        foreach (var receptionInfo in receptionInfos)
        {
            sb.AppendLine($"üìç {receptionInfo.Address}")
                .AppendLine($"üìû {string.Join("\n      ", receptionInfo.Phone)}")
                .AppendLine($"‚è∞ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {receptionInfo.Schedule}")
                .AppendLine($"      {receptionInfo.WorkTime}\n");
        }

        return sb.ToString();
    }

    public string GetFindNearestReceptionsCancelledText() => $"–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∏–µ–º–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {messageTextOptions.Value.ReceptionsLink}.";
    public string GetRequestPersonalDataProcessingPolicyText() => $"–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö? {messageTextOptions.Value.PersonalDataPolicyLink}";
    public string GetUnhandledExceptionOccuredText() => "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
}